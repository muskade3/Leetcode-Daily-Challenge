Ques:-Minimum Falling Path Sum
Given an n x n array of integers matrix, return the minimum sum of any falling path through matrix.

A falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. Specifically, the next element from position (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1).

Input: matrix = [[2,1,3],[6,5,4],[7,8,9]]
Output: 13
Explanation: There are two falling paths with a minimum sum as shown.

Input: matrix = [[-19,57],[-40,-5]]
Output: -59
Explanation: The falling path with a minimum sum is shown.

Sol:-
class Solution {  
    public int minFallingPathSum(int[][] matrix) {
        int m=matrix.length;
        int n=matrix[0].length;
        int dp[][]= new int[m][n];
for(int i=0;i<matrix.length;i++)
        {
        dp[m-1][i]=matrix[m-1][i];
            
        }
        for(int i=m-2;i>=0;i--)
        {
            for(int j=0;j<n;j++)
            {
               int down=dp[i+1][j];
            int dialeft=Integer.MAX_VALUE;
            if(i<m-1&&j>0){
          dialeft=dp[i+1][j-1];
            }
            int diaright=Integer.MAX_VALUE;
         if(i<m-1&&j<n-1){
         diaright=dp[i+1][j+1];
         }
         int x=Math.min(down,Math.min(dialeft,diaright));
          dp[i][j] =matrix[i][j]+x;
            }
        }
    
        int min=Integer.MAX_VALUE;
        for(int i=0;i<m;i++)
        {
            min=Math.min(min,dp[0][i]);
        }
        return min;
    }
}
