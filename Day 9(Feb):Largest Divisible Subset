Ques:-Largest Divisible Subset
Given a set of distinct positive integers nums, return the largest subset answer such that every pair (answer[i], answer[j]) of elements in this subset satisfies:

answer[i] % answer[j] == 0, or
answer[j] % answer[i] == 0
If there are multiple solutions, return any of them.

 

Example 1:

Input: nums = [1,2,3]
Output: [1,2]
Explanation: [1,3] is also accepted.

Example 2:

Input: nums = [1,2,4,8]
Output: [1,2,4,8]


Sol:-
class Solution {
    
    public List<Integer> largestDivisibleSubset(int[] nums) {
        List<Integer>result=new ArrayList<>();
        Arrays.sort(nums);
      int n=nums.length;
       int[]t=new int[n];
      Arrays.fill(t,1);
      int[]prev_index=new int[n];
      Arrays.fill(prev_index,-1);
      int max_l=0;
      int last_indexchosen=0;
      for(int i=0;i<n;i++)
      {
          for(int j=0;j<i;j++)
          {
              if(nums[i]%nums[j]==0)
              {
                  if(t[j]+1>t[i])
                  {
t[i]=t[j]+1;
prev_index[i]=j;
                  }
                  if(t[i]>max_l)
                  {
                      max_l=t[i];
                      last_indexchosen=i;
                  }
                  
              }
          }
      }
      while(last_indexchosen!=-1)
      {
result.add(nums[last_indexchosen]);
last_indexchosen=prev_index[last_indexchosen];
      }
      return  result;
      
    }
}
