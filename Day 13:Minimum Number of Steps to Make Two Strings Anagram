Ques:-
You are given two strings of the same length s and t. In one step you can choose any character of t and replace it with another character.

Return the minimum number of steps to make t an anagram of s.

An Anagram of a string is a string that contains the same characters with a different (or the same) ordering.

Example 1:

Input: s = "bab", t = "aba"
Output: 1
Explanation: Replace the first 'a' in t with b, t = "bba" which is anagram of s.

Example 2:

Input: s = "leetcode", t = "practice"
Output: 5
Explanation: Replace 'p', 'r', 'a', 'i' and 'c' from t with proper characters to make t anagram of s.

Example 3:

Input: s = "anagram", t = "mangaar"
Output: 0
Explanation: "anagram" and "mangaar" are anagrams. 

Sol:-
class Solution {
    public int minSteps(String s, String t) {
        HashMap<Character,Integer>map=new HashMap<>();
         HashMap<Character,Integer>mapt=new HashMap<>();
        for(int i=0;i<s.length();i++)
        {
            if(map.containsKey(s.charAt(i)))
            {
                int v=map.get(s.charAt(i));
                map.put(s.charAt(i),v+1);
            }else
            {
                map.put(s.charAt(i),1);
            }
        }
        for(int i=0;i<t.length();i++)
        {
            if(mapt.containsKey(t.charAt(i)))
            {
                int v=mapt.get(t.charAt(i));
                mapt.put(t.charAt(i),v+1);
            }else
            {
                mapt.put(t.charAt(i),1);
            }
        }
        int ans=0;
        for(int i=0;i<s.length();i++)
         {

if(mapt.containsKey(s.charAt(i)))
{
    if(map.get(s.charAt(i))>mapt.get(s.charAt(i))){
    ans=ans+Math.abs(map.get(s.charAt(i))-mapt.get(s.charAt(i)));
    mapt.put(s.charAt(i),0);
    map.put(s.charAt(i),0);
}
}else
{
    ans=ans+map.get(s.charAt(i));
     map.put(s.charAt(i),0);
}
        }
        return ans;
    }
}

