class Solution {
    public List<Integer> findAllPeople(int n, int[][] meetings, int firstPerson) {
      Map<Integer, List<int[]>> timemeeting= new TreeMap<>();
      for(int[]meeting: meetings)
      {
          int x= meeting[0];
          int y=meeting[1];
          int t= meeting[2];
          timemeeting.computeIfAbsent(t,k -> new ArrayList<>()).add(new int[]{x,y});

      } 
      boolean[]knows= new boolean[n];
      knows[0]=true;
      knows[firstPerson]=true;
      for(int t: timemeeting.keySet())
      {
          Map<Integer,List<Integer>> meet= new HashMap<>();
          for(int [] meeting :timemeeting.get(t))
          {
              int x=meeting[0];
              int y= meeting[1];
              meet.computeIfAbsent(x,k -> new ArrayList<>()).add(y);
              meet.computeIfAbsent(y,k -> new ArrayList<>()).add(x);
          }
      
      Set<Integer> start= new HashSet<>();
      for(int [] meeting: timemeeting.get(t))
      {
          int x= meeting[0],y= meeting[1];
          if(knows[x])
          {
              start.add(x);
          }
          if(knows[y])
          {
              start.add(y);
          }

      }
      Queue<Integer> q= new LinkedList<>(start);
      while(!q.isEmpty())
      {
          int person= q.poll();
          for(int nextperson: meet.getOrDefault(person, new ArrayList<>()))
          {
              if(!knows[nextperson])
              {
                  knows[nextperson]=true;
                  q.offer(nextperson);
              }
          }
      }

    }
    List<Integer>ans= new ArrayList<>();
    for(int i=0;i<n;i++)
    {
        if(knows[i])
        {
            ans.add(i);
        }
    }
    return ans;
    }
}
