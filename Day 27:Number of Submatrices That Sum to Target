Ques:-
Given a matrix and a target, return the number of non-empty submatrices that sum to target.

A submatrix x1, y1, x2, y2 is the set of all cells matrix[x][y] with x1 <= x <= x2 and y1 <= y <= y2.

Two submatrices (x1, y1, x2, y2) and (x1', y1', x2', y2') are different if they have some coordinate that is different: for example, if x1 != x1'.

Input: matrix = [[0,1,0],[1,1,1],[0,1,0]], target = 0
Output: 4
Explanation: The four 1x1 submatrices that only contain 0.


Input: matrix = [[1,-1],[-1,1]], target = 0
Output: 5
Explanation: The two 1x2 submatrices, plus the two 2x1 submatrices, plus the 2x2 submatrix.


Input: matrix = [[904]], target = 0
Output: 0

Sol:-
class Solution {
    public int numSubmatrixSumTarget(int[][] matrix, int target) {
        int rows=matrix.length;
        int cols=matrix[0].length;
        for(int row=0;row<rows;row++)
        {
            for(int col=1;col<cols;col++)
            {
                matrix[row][col]+=matrix[row][col-1];
            }
        }
        int result=0;
        for(int startcol=0;startcol<cols;startcol++)
        {
            for(int currcol=startcol;currcol<cols;currcol++)
            {
                Map<Integer,Integer>map=new HashMap<>();
                map.put(0,1);
                int sum=0;
                for(int row=0;row<rows;row++)
                {
                      sum += matrix[row][currcol] - (startcol > 0 ? matrix[row][startcol - 1] : 0);

                    if (map.containsKey(sum - target)) {
                        result += map.get(sum - target);
                    }

                    map.put(sum, map.getOrDefault(sum, 0) + 1);
                
                }
            }
        }
        return result;
        
    }
}
